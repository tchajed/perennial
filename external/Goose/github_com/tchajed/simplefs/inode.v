(* autogenerated from github.com/tchajed/simplefs/inode *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.tchajed.marshal.
From Goose Require github_com.tchajed.simplefs.
From Goose Require github_com.tchajed.simplefs.superblock.

From Perennial.goose_lang Require Import ffi.disk_prelude.

Definition Meta := struct.decl [
  "Mode" :: uint32T
].

Definition Meta__AsBytes: val :=
  rec: "Meta__AsBytes" "m" :=
    let: "buf" := ref_to (slice.T byteT) (NewSlice byteT #0) in
    "buf" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "buf") (struct.get Meta "Mode" "m"));;
    ![slice.T byteT] "buf".

Definition metaFromBytes: val :=
  rec: "metaFromBytes" "bytes" :=
    let: ("mode", "bytes2") := marshal.ReadInt32 "bytes" in
    (struct.mk Meta [
       "Mode" ::= "mode"
     ], "bytes2").

Definition META_SIZE : expr := #4.

(* chosen to make inode size correct *)
Definition NUM_DIRECT : expr := #27.

Definition NUM_BLOCK_PTRS : expr := NUM_DIRECT + #1.

Definition Inode := struct.decl [
  "typ_" :: simplefs.InodeType;
  "length" :: uint64T;
  "meta" :: struct.t Meta;
  "blockPtrs" :: slice.T uint32T
].

Definition NewInode: val :=
  rec: "NewInode" "t" :=
    struct.new Inode [
      "typ_" ::= "t";
      "length" ::= #0;
      "meta" ::= struct.mk Meta [
        "Mode" ::= #(U32 0)
      ];
      "blockPtrs" ::= NewSlice uint32T NUM_BLOCK_PTRS
    ].

Definition Inode__GetLength: val :=
  rec: "Inode__GetLength" "i" :=
    struct.loadF Inode "length" "i".

Definition Inode__SetLength: val :=
  rec: "Inode__SetLength" "i" "length" :=
    struct.storeF Inode "length" "i" "length";;
    #().

Definition Inode__GetType: val :=
  rec: "Inode__GetType" "i" :=
    struct.loadF Inode "typ_" "i".

Definition Inode__SetType: val :=
  rec: "Inode__SetType" "i" "t" :=
    struct.storeF Inode "typ_" "i" "t";;
    #().

Definition Inode__GetMeta: val :=
  rec: "Inode__GetMeta" "i" :=
    struct.loadF Inode "meta" "i".

Definition Inode__SetMeta: val :=
  rec: "Inode__SetMeta" "i" "meta" :=
    struct.storeF Inode "meta" "i" "meta";;
    #().

Definition Inode__SetMode: val :=
  rec: "Inode__SetMode" "i" "mode" :=
    struct.storeF Meta "Mode" (struct.fieldRef Inode "meta" "i") "mode";;
    #().

Definition Inode__GetBlockPtr: val :=
  rec: "Inode__GetBlockPtr" "i" "index" :=
    SliceGet uint32T (struct.loadF Inode "blockPtrs" "i") "index".

Definition Inode__SetBlockPtr: val :=
  rec: "Inode__SetBlockPtr" "i" "index" "ptr" :=
    SliceSet uint32T (struct.loadF Inode "blockPtrs" "i") "index" "ptr";;
    #().

Definition Inode__AsBytes: val :=
  rec: "Inode__AsBytes" "i" :=
    let: "buf" := ref_to (slice.T byteT) (NewSlice byteT #0) in
    "buf" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "buf") (struct.loadF Inode "typ_" "i"));;
    "buf" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "buf") (struct.loadF Inode "length" "i"));;
    "buf" <-[slice.T byteT] (SliceAppendSlice byteT (![slice.T byteT] "buf") (Meta__AsBytes (struct.loadF Inode "meta" "i")));;
    ForSlice uint32T <> "ptr" (struct.loadF Inode "blockPtrs" "i")
      ("buf" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "buf") "ptr"));;
    ![slice.T byteT] "buf".

Definition FromBytes: val :=
  rec: "FromBytes" "b" :=
    let: ("typ", "b2") := marshal.ReadInt32 "b" in
    let: ("length", "b3") := marshal.ReadInt "b2" in
    let: ("meta", "b4") := metaFromBytes "b3" in
    let: "blockPtrs" := ref_to (slice.T uint32T) (NewSliceWithCap uint32T #0 NUM_BLOCK_PTRS) in
    let: "bytes" := ref_to (slice.T byteT) "b4" in
    let: "bound" := NUM_BLOCK_PTRS in
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, (![uint64T] "i") < "bound"); (λ: <>, "i" <-[uint64T] ((![uint64T] "i") + #1)) := λ: <>,
      let: ("ptr", "b_next") := marshal.ReadInt32 (![slice.T byteT] "bytes") in
      "bytes" <-[slice.T byteT] "b_next";;
      "blockPtrs" <-[slice.T uint32T] (SliceAppend uint32T (![slice.T uint32T] "blockPtrs") "ptr");;
      Continue);;
    struct.new Inode [
      "typ_" ::= "typ";
      "length" ::= "length";
      "meta" ::= "meta";
      "blockPtrs" ::= ![slice.T uint32T] "blockPtrs"
    ].

Definition ReadInode: val :=
  rec: "ReadInode" "d" "sb" "i" :=
    let: "blkNum" := (superblock.Superblock__InodeStart "sb") + ("i" `quot` simplefs.INODES_PER_BLOCK) in
    let: "blkOff" := "i" `rem` simplefs.INODES_PER_BLOCK in
    let: "blk" := disk.Read "blkNum" in
    let: "inodeData" := SliceSubslice byteT "blk" ("blkOff" * simplefs.INODE_SIZE) (("blkOff" + #1) * simplefs.INODE_SIZE) in
    let: "ino" := FromBytes "inodeData" in
    "ino".

Definition copyInodeToBlock: val :=
  rec: "copyInodeToBlock" "blk" "inum" "i" :=
    let: "blkOff" := "inum" `rem` simplefs.INODES_PER_BLOCK in
    SliceCopy byteT (SliceSubslice byteT "blk" ("blkOff" * simplefs.INODE_SIZE) (("blkOff" + #1) * simplefs.INODE_SIZE)) (Inode__AsBytes "i");;
    #().

Definition Inode__Write: val :=
  rec: "Inode__Write" "i" "d" "sb" "inum" :=
    let: "blkNum" := (superblock.Superblock__InodeStart "sb") + ("inum" `quot` simplefs.INODES_PER_BLOCK) in
    let: "blk" := disk.Read "blkNum" in
    copyInodeToBlock "blk" "inum" "i";;
    disk.Write "blkNum" "blk";;
    #().
