(* autogenerated from github.com/tchajed/simplefs/superblock *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.goose_lang.std.
From Goose Require github_com.tchajed.marshal.

From Perennial.goose_lang Require Import ffi.disk_prelude.

(* init.go *)

Definition divRoundup: val :=
  rec: "divRoundup" "a" "b" :=
    (("a" + "b") - #1) `quot` "b".

(* Superblock from superblock.go *)

Definition Superblock := struct.decl [
  "LogBlocks" :: uint64T;
  "InodeBlocks" :: uint64T;
  "DataBitmapBlocks" :: uint64T;
  "DataBlocks" :: uint64T
].

Definition Superblock__LogStart: val :=
  rec: "Superblock__LogStart" "sb" :=
    #1.

Definition Superblock__InodeStart: val :=
  rec: "Superblock__InodeStart" "sb" :=
    (Superblock__LogStart "sb") + (struct.loadF Superblock "LogBlocks" "sb").

Definition Superblock__DataBitmapStart: val :=
  rec: "Superblock__DataBitmapStart" "sb" :=
    (Superblock__InodeStart "sb") + (struct.loadF Superblock "InodeBlocks" "sb").

Definition Superblock__DataStart: val :=
  rec: "Superblock__DataStart" "sb" :=
    (Superblock__DataBitmapStart "sb") + (struct.loadF Superblock "DataBitmapBlocks" "sb").

(* The number of blocks of the disk used by this file system configuration *)
Definition Superblock__UsedBlocks: val :=
  rec: "Superblock__UsedBlocks" "sb" :=
    (Superblock__DataStart "sb") + (struct.loadF Superblock "DataBlocks" "sb").

Definition Superblock__allocatableDataBlocks: val :=
  rec: "Superblock__allocatableDataBlocks" "sb" :=
    (struct.loadF Superblock "DataBitmapBlocks" "sb") * (disk.BlockSize * #8).

Definition Superblock__Wf: val :=
  rec: "Superblock__Wf" "sb" :=
    (((((((std.SumNoOverflow #1 (struct.loadF Superblock "LogBlocks" "sb")) && (std.SumNoOverflow (#1 + (struct.loadF Superblock "LogBlocks" "sb")) (struct.loadF Superblock "InodeBlocks" "sb"))) && (std.SumNoOverflow (#1 + (struct.loadF Superblock "LogBlocks" "sb")) (struct.loadF Superblock "InodeBlocks" "sb"))) && (std.SumNoOverflow ((#1 + (struct.loadF Superblock "LogBlocks" "sb")) + (struct.loadF Superblock "InodeBlocks" "sb")) (struct.loadF Superblock "DataBitmapBlocks" "sb"))) && (std.SumNoOverflow (((#1 + (struct.loadF Superblock "LogBlocks" "sb")) + (struct.loadF Superblock "InodeBlocks" "sb")) + (struct.loadF Superblock "DataBitmapBlocks" "sb")) (struct.loadF Superblock "DataBlocks" "sb"))) && ((Superblock__UsedBlocks "sb") < #4294967296)) && ((Superblock__allocatableDataBlocks "sb") ≥ (struct.loadF Superblock "DataBlocks" "sb"))) && ((struct.loadF Superblock "DataBlocks" "sb") < #4294967296).

(* Create a default superblock configuration for a given disk size *)
Definition InitSuperblock: val :=
  rec: "InitSuperblock" "sizeBlocks" :=
    (if: "sizeBlocks" < #15
    then Panic "disk too small"
    else #());;
    control.impl.Assume ("sizeBlocks" < #4294967296);;
    let: "inodeBlocks" := divRoundup ("sizeBlocks" - #1) #10 in
    let: "nominalDataBlocks" := ("sizeBlocks" - #1) - "inodeBlocks" in
    let: "dataBitmapBlocks" := divRoundup "nominalDataBlocks" (disk.BlockSize * #8) in
    let: "dataBlocks" := (("sizeBlocks" - #1) - "inodeBlocks") - "dataBitmapBlocks" in
    let: "sb" := struct.new Superblock [
      "LogBlocks" ::= #0;
      "InodeBlocks" ::= "inodeBlocks";
      "DataBitmapBlocks" ::= "dataBitmapBlocks";
      "DataBlocks" ::= "dataBlocks"
    ] in
    (if: (~ (Superblock__Wf "sb"))
    then Panic "superblock incorrectly constructed"
    else #());;
    (if: (Superblock__UsedBlocks "sb") > "sizeBlocks"
    then Panic "superblock too big"
    else #());;
    "sb".

Definition magicConst : expr := #10733987902914496678.

Definition Decode: val :=
  rec: "Decode" "b" :=
    let: ("magic", "b2") := marshal.ReadInt "b" in
    (if: "magic" ≠ magicConst
    then Panic "invalid magic number"
    else #());;
    let: ("logBlocks", "b3") := marshal.ReadInt "b2" in
    let: ("inodeBlocks", "b4") := marshal.ReadInt "b3" in
    let: ("dataBitmapBlocks", "b5") := marshal.ReadInt "b4" in
    let: ("dataBlocks", <>) := marshal.ReadInt "b5" in
    struct.new Superblock [
      "LogBlocks" ::= "logBlocks";
      "InodeBlocks" ::= "inodeBlocks";
      "DataBitmapBlocks" ::= "dataBitmapBlocks";
      "DataBlocks" ::= "dataBlocks"
    ].

(* Load superblock from disk *)
Definition LoadSuperblock: val :=
  rec: "LoadSuperblock" "d" :=
    let: "blk" := disk.Read #0 in
    let: "sb" := Decode "blk" in
    "sb".

(* superblock.go *)

Definition INODE_SIZE : expr := #128.

Definition Superblock__Encode: val :=
  rec: "Superblock__Encode" "sb" :=
    let: "buf" := ref (zero_val (slice.T byteT)) in
    "buf" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "buf") magicConst);;
    "buf" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "buf") (struct.loadF Superblock "LogBlocks" "sb"));;
    "buf" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "buf") (struct.loadF Superblock "InodeBlocks" "sb"));;
    "buf" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "buf") (struct.loadF Superblock "DataBitmapBlocks" "sb"));;
    "buf" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "buf") (struct.loadF Superblock "DataBlocks" "sb"));;
    let: "padding" := NewSlice byteT (disk.BlockSize - (slice.len (![slice.T byteT] "buf"))) in
    "buf" <-[slice.T byteT] (SliceAppendSlice byteT (![slice.T byteT] "buf") "padding");;
    ![slice.T byteT] "buf".

Definition Superblock__NumInodes: val :=
  rec: "Superblock__NumInodes" "sb" :=
    ((struct.loadF Superblock "InodeBlocks" "sb") * disk.BlockSize) `quot` INODE_SIZE.
